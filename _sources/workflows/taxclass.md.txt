# Taxonomic Classification Walkthrough

In this document, we walk through a few 
rules in the taxonomic workflow
to illustrate how to run dahak workflows
using custom rules and custom workflow 
parameters.

See [dahak - taxonomic classification workflow](https://github.com/dahak-metagenomics/dahak/tree/master/workflows/taxonomic_classification).

## Running Taxonomic Classification Workflows

Start by selecting which rule from the workflow you want to run.
To see available rules, run:

```
$ taco ls
```

Add the rule you want to run to the workflow configuration file.

Check the relevant `rules/dahak/*.settings` file for any settings
to change in the workflow parameters file.

### Pull Biocontainers

Start with a simple example of a single workflow step
with no input or output files. To run the
`pull_biocontainers` workflow:

```
$ cat pull-biocontainers-workflow.json
{
    "workflow_target" : "pull_biocontainers"
}
```

Now run the workflow (include `-n` to do a dry run):

```
$ ./taco pull-biocontainers-workflow
```

If we wanted to modify any parameters,
we could add configuration parameters
to `pull-biocontainers-params.json`.

Note that the `biocontainers` rule is defined in 
`rules/dahak/biocontainers.rule`
and the corresponding default parameter
values are defined in `rules/dahak/biocontainers.settings`.

```
$ cat pull-biocontainers-params.json
{
    'biocontainers' : {
        'sourmash' : {
            'version' : '2.0.0a2--py36_0'
        }
    }
}

```

Now run the workflow, specifying both the workflow
and parameter configuration files on the command line
(include `-n` to do a dry run):

```
$ ./taco -n pull-biocontainers-workflow pull-biocontainers-params # Dry run

$ ./taco pull-biocontainers-workflow pull-biocontainers-params
```

### Download and Unpack Sourmash SBTs

Like the prior step, this step has no
input or output file names to set.

This step downloads SBTs containing hashes
from the microbial genomes in the NCBI Databank
and RefSeq databases.

```
$ cat unpack-sbt-workflow.json
{
    "workflow_target" : "unpack_sourmash_sbts"
}

$ ./taco unpack-sbt-workflow
```

This calls the `unpack_sourmash_sbts` rule,
which calls the `download_sourmash_sbts` rule.
These rules are defined in `rules/dahak/sourmash_sbt.rule`.

### Calculate Signatures: Default Parameters

The calculate signatures rule can be run with default values:

```
$ cat calc-sigs.json
{
    "workflow_target" : "calculate_signatures"
}

$ ./taco calc-sigs
```

### Calculate Signatures: Modified Parameters

Two parameter groups affect the `calculate_signatures` rule:
* rule-specific parameters for `calculate_signatures` 
    (contained in `rules/dahak/calculate_signatures.settings`)
* group parameters for `read` pertaining to sequence reads
    (contained in `rules/dahak/reads.settings`)


There are a few different parameter values that affect
the calculate signatures workflow.



The first are `calculate_signatures` rule-specific parameters
contained in `rules/dahak/calculate_signatures.settings`.







To change parameters for this workflow, 
create a parameters dictionary under the 
key `calculate_signatures`.

`calculate_signatures` parameters required by the rules:
* `scale` - value for scale parameter
* `kvalues` - list of k values to use (integers)

`calculate_signatures` input and output parameter file names:
* `sig_name` - name of signature .sig files (inputs)
* `merge_name` - name of final merged file (outputs)

Optional parameter names (part of default but can be overridden):
* `kvalues_fname` - string used to add k values to file name; can be overridden
    by overriding signature name and merge name (above) so that they do not include
    `{kvalues_fname}`. They do include this variable by default.

To ensure inputs uniquely map to outputs, any `{variables}` appearing
in the signature name (input) should also appear in the merge name (output).

To set these in a `calc-sigs-params.json` file,

```
{
    'calculate_signatures' : {
        'scale' : 100000,
        ...
    }
}
```

`reads` parameters required/expected by rules:
* `fq_fwd`
* `fq_rev`

To set these in a` calc-sigs-params.json` file,

```
{
    'calculate_signatures' : { ... },
    'reads' : {
        'fq_fwd' : '{base}_1.trim{ntrim}.fq.gz',
        'fq_rev' : '{base}_2.trim{ntrim}.fq.gz'
    }
}
```




The following convention is recommended:

**signature name:** 
* include variables `{base} {trim} {scale} {kvalues_fname}`

**merge name:**

Note that both `sig_name` and `merge_file` should contain
the variables `{base}`, `{ntrim}`, `{scale}`, and `{kvalues_fname}`
to uniquely link input to output files.

Example:

```
$ cat calc-sigs-params.json
{
    "scale" : 10000,
    "kvalues" : [21,31,51],
    "kvalues_fname" : "21_31_51",
    "sig_name" : "{base}.trim{ntrim}.scaled{scale}.k{kvalues_fname}.sig",
```

## Rules

### List of Rules

```
pull_biocontainers
    
    - Pull the latest version of sourmash, kaiju, and krona
    - Version numbers are set in biocontainers.settings
    - To call this rule, ask for the file .pulled_containers
    
download_sourmash_sbts
    
    Downoad the sourmash SBTs from spacegraphcats

    To call this rule, request sourmash SBT json file for the specified database.
    
unpack_sourmash_sbts
    
    Unpack the sourmash SBTs
    
calculate_signatures
    
    Calculate signatures from trimmed data using sourmash
    
download_trimmed_data
    
    Download the trimmed data from OSF

    To call this rule, request the files listed in trimmed_data.dat
    
unpack_kaiju
    
    Download and unpack the kaiju database.
    
run_kaiju
    
    Run kaiju
    
kaiju2krona
    
    Convert kaiju results to krona results,
    and generate a report.
    
kaiju2kronasummary
    
    Convert kaiju results to krona results,
    and generate a report.
    
filter_taxa_total
    
    Filter out taxa with low abundances by obtaining genera that
    comprise at least {pct} percent of the total reads
    (default: 1%)
    
filter_taxa_class
    
    For comparison, take the genera that comprise
    at least {pct} percent of all of the classified reads
    (default: 1%)
    
visualize_krona
    
    Visualize the results of the
    full and filtered taxonomic
    classifications using krona.
```    

### List of Rule Files

```
rules/
    dahak/
        biocontainers.rule
        calculate_signatures.rule
        filter_taxa.rule
        kaiju.rule
        kaiju2krona.rule
        krona_visualization.rule
        sourmash_sbt.rule
        trimmed_data.rule
```

