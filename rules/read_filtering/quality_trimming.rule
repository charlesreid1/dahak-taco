from os.path import join

data_dir = config['data_dir']

try:
    biocontainers = config['biocontainers']
except:
    biocontainers = {}

try:
    readfilt = config['read_filtering']
except KeyError:
    readfilt = {}

try:
    # If you only want to substitute a subset of wildcards,
    # you can leave a wildcard untouched by substituting
    # the string {variable} for {variable}.
    # 
    # We use this trick several times in these rules.
    # 
    fq_fwd = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'].format(direction=1,sample='{sample}'))
    fq_rev = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'].format(direction=2,sample='{sample}'))
except KeyError:
    #err = "ERROR:\nNo pre-trimming pattern present in parameters.\n"
    #err += "Specify a pre-trimming pattern in config['read_filtering']['read_patterns']['pre_trimming_pattern].\n"
    #raise Exception(err)
    fq_fwd = "" # if we leave these blank,
    fq_rev = "" # snakemake complains about duplicate output targets

quality_input = [fq_fwd, fq_rev]

try:
    fq_fwd_trimmed = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(direction=1,sample='{sample}',qual='{qual}'))
    fq_rev_trimmed = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(direction=2,sample='{sample}',qual='{qual}'))
except KeyError:
    #err = "ERROR:\nNo post-trimming pattern present in parameters.\n"
    #err += "Specify a post-trimming pattern in config['read_filtering']['read_patterns']['post_trimming_pattern].\n"
    #raise Exception(err)
    fq_fwd_trimmed = "" # if we leave these blank,
    fq_rev_trimmed = "" # snakemake complains about duplicate output targets

try:
    trim_target_ext = readfilt['quality_trimming']['trim_suffix']
except KeyError:
    #err = "ERROR:\nNo suffix found for output files from quality trimming.\n"
    #err += "Specify a trim output file suffix config['read_filtering']['quality_trimming']['trim_suffix'].\n"
    #raise Exception(err)
    trim_target_ext = ""

fq_fwd_se = re.sub('\.fq\.gz',trim_target_ext,fq_fwd_trimmed)
fq_rev_se = re.sub('\.fq\.gz',trim_target_ext,fq_rev_trimmed)

quality_output = [fq_fwd_trimmed, fq_fwd_se,
                  fq_rev_trimmed, fq_rev_se]
if(quality_output==['','','','']):
    quality_output = ''

try:
    adapter_file = join(data_dir, readfilt['adapter_file']['name'])
except KeyError:
    #err = "ERROR:\nNo read adapter file was found in the parameters.\n"
    #err += "Specify a read adapter file using config['read_filtering']['adapter_file']['name'].\n"
    #raise Exception(err)
    adapter_file = "_"

quality_log = join(data_dir,'trimmomatic_pe_{sample}.log')

trimmo_image = container_image_name(biocontainers,'trimmomatic')

pulled_containers_touchfile = join(data_dir,'.pulled_containers')


rule quality_trimming:
    """
    Trim reads from the sequencer by dropping low-quality reads.
    """
    input:
        quality_input, adapter_file, pulled_containers_touchfile
    output:
        quality_output
    message: 
        '''--- Quality trimming data at q 2 and 30.'''
    singularity: 
        {trimmo_image}
    log: 
        quality_log
    run:
        qual_wc = "{qual}".format(**wildcards)

        quality_input_wc = [x.format(**wildcards) for x in quality_input]
        quality_input_wc = ["/%s"%(x) for x in quality_input_wc]
        quality_input_wcs = " ".join(quality_input_wc)

        quality_output_wc = [x.format(**wildcards) for x in quality_output]
        quality_output_wc = ["/%s"%(x) for x in quality_output_wc]
        quality_output_wcs = " ".join(quality_output_wc)

        log_wc = quality_log.format(**wildcards)

        shell('''
            docker run \
                -u $(id -u):$(id -g) \
                -v {PWD}/{data_dir}:/{data_dir} \
                -it \
                {trimmo_image} \
                trimmomatic PE \
                {quality_input_wcs} \
                {quality_output_wcs} \
                ILLUMINACLIP:/{adapter_file}:2:40:15 \
                LEADING:{qual_wc} \
                TRAILING:{qual_wc} \
                SLIDINGWINDOW:4:{qual_wc} \
                MINLEN:25 \
                2> {log_wc}
        ''')

