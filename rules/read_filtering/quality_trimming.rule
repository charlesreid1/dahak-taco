from os.path import join

data_dir = config['data_dir']
readfilt = config['read_filtering']

fq_fwd = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'].format(direction=1,sample='{sample}'))
fq_rev = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'].format(direction=2,sample='{sample}'))

quality_input = [fq_fwd, fq_rev]

fq_fwd_trimmed = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(direction=1,sample='{sample}',qual='{qual}'))
fq_rev_trimmed = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(direction=2,sample='{sample}',qual='{qual}'))

trim_target_ext = readfilt['quality_trimming']['trim_suffix']

fq_fwd_se = re.sub('\.fq\.gz',trim_target_ext,fq_fwd_trimmed)
fq_rev_se = re.sub('\.fq\.gz',trim_target_ext,fq_rev_trimmed)

quality_output = [fq_fwd_trimmed, fq_fwd_se,
                  fq_rev_trimmed, fq_rev_se]

adapter_file = list(readfilt['adapter_file'].keys())[0]

quality_log = join(data_dir,'trimmomatic_pe_{sample}.log')

rule quality_trimming:
    """
    Trim reads from the sequencer by dropping low-quality reads.

    See quality_trimming.md
    """
    input:
        quality_input,
        adapter_file
    output:
        quality_output
    message: 
        '''--- Quality trimming data at q 2 and 30.'''
    #singularity: 
    #    'docker://quay.io/biocontainers/trimmomatic:0.36--5'
    log: 
        quality_log
    run:
        qual_wc = "{qual}".format(**wildcards)
        quality_input_wc = quality_input.format(**wildcards)
        quality_output_wc = quality_output.format(**wildcards)
        log_wc = quality_output.format(**wildcards)
        shell('''
            trimmomatic PE                      \
            {quality_input_wc}                  \
            {quality_output_wc}                 \
            ILLUMINACLIP:{adapter_file}:2:40:15 \
            LEADING:{qual_wc}                   \
            TRAILING:{qual_wc}                  \
            SLIDINGWINDOW:4:{qual_wc}           \
            MINLEN:25                           \
            2> {log_wc}
        ''')

