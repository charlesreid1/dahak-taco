import re
from os.path import join, dirname

data_dir = config['data_dir']
readfilt = config['read_filtering']
biocontainers = config['biocontainers']

quayurl = biocontainers['fastqc']['quayurl'] + ":" + biocontainers['fastqc']['version']

# The substitution pattern could potentially
# be parameterized, but let's not go overboard
pre_trimming_input  = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'])
pre_trimming_output = re.sub('.fq.gz', '_fastqc.zip', pre_trimming_input)

rule pre_trimming_quality_assessment:
    """
    Perform a pre-trimming quality check 
    of the reads from the sequencer.

    See pre_post_assessment.md
    """
    input:
        pre_trimming_input
    output: 
        pre_trimming_output
    message: 
        '''--- Pre-trim quality check of trimmed data with fastqc.'''
    singularity: 
        quayurl
    threads: 2
    run:
        output_dir = dirname(output)
        if(not isfile(output)):
            shell('''
                fastqc -t {threads} {input} -o {output_dir}
            ''')

post_trimming_input  = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'])
post_trimming_output = re.sub('.fq.gz', '_fastqc.zip', post_trimming_input)

rule post_trimming_quality_assessment:
    """
    Perform a post-trimming quality check 
    of the reads from the sequencer.

    See pre_post_assessment.md
    """
    input:
        post_trimming_input
    output:
        post_trimming_output
    message: 
        '''--- Post-trim quality check of trimmed data with fastqc.'''
    singularity: 
        quayurl
    threads: 2 
    run:
        output_dir = dirname(output)
        if(not isfile(output)):
            shell('''
                fastqc -t {threads} {input} -o {output_dir}
            ''')

