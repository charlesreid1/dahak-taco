import os, re
from os.path import join, dirname

"""
A horrible last-minute discovery: 
variables that are just above a rule
are not evaluated just before that rule.

That means the quayurl variable should not 
be shared across rule files, or you'll 
end up with the wrong container URLs.

Resolved by using unique variable names
in each separate rule file.
"""


data_dir = config['data_dir']
readfilt = config['read_filtering']
biocontainers = config['biocontainers']

PWD = os.getcwd()

pre_trimming_input  = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'])
target_suffix = readfilt['quality_assessment']['fastqc_suffix']
target_ext = "%s.zip"%(target_suffix)
pre_trimming_output = re.sub('\.fq\.gz',target_ext,pre_trimming_input)


# Get the quay URL
# 
# To allow the user to use local Dockerfiles,
# in case something in bioconda is borked,
# we require the user to specify the name 
# of the docker image to run, and set 
# use_local to true
# 
# The 'quayurl' and 'version' have 
# default values, so they will always
# be defined and should not be used to 
# determine if the user has asked for 
# the quay image or a local image.
# 
# The 'use_local' key should indicate
# whether to use a local Docker image.
# If it is true, the 'local' key
# should indicate the local image to use.

app = 'fastqc'
if(biocontainers[app]['use_local']):
    if('local' not in biocontainers[app].keys()):
        err = "Error: local docker image requested, but none specified with 'local' key."
        err += "\nSpecify the name of a local docker image in config['biocontainers'][app]['local']"
        raise Exception(err)
    fastqc_quayurl = biocontainers[app]['local']
    print(" - Setting biocontainer target to local image %s"%(fastqc_quayurl))
else:
    fastqc_quayurl = biocontainers[app]['quayurl'] + ":" + biocontainers[app]['version']
    print(" - Setting biocontainer target to remote url %s"%(fastqc_quayurl))


rule pre_trimming_quality_assessment:
    """
    Perform a pre-trimming quality check 
    of the reads from the sequencer.

    See pre_post_assessment.md
    """
    input:
        pre_trimming_input
    output: 
        pre_trimming_output
    message: 
        '''--- Pre-trim quality check of trimmed data with fastqc.'''
    singularity: 
        fastqc_quayurl
    threads: 2
    run:
        ### quayurl = biocontainers['fastqc']['quayurl'] + ":" + biocontainers['fastqc']['version']

        # get output file name with wildcards replaced
        pre_trimming_output_wc = pre_trimming_output.format(**wildcards)

        # get input file name with wildcards replaced
        pre_trimming_input_wc = pre_trimming_input.format(**wildcards)

        # get directory for final output
        output_dir = dirname(pre_trimming_output_wc)

        shell('''
            set -x
            docker run \
                -u "$(id -u):$(id -g)" \
                -v {PWD}/{data_dir}:/{data_dir} \
                -it \
                {fastqc_quayurl} \
                fastqc \
                -t {threads} \
                /{pre_trimming_input_wc} \
                -o /{data_dir}
        ''')


post_trimming_input  = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'])
target_suffix = readfilt['quality_assessment']['fastqc_suffix']
target_ext = "%s.zip"%(target_suffix)
post_trimming_output = re.sub('\.fq\.gz',target_ext,post_trimming_input)


rule post_trimming_quality_assessment:
    """
    Perform a post-trimming quality check 
    of the reads from the sequencer.

    See post_post_assessment.md
    """
    input:
        post_trimming_input
    output:
        post_trimming_output
    message: 
        '''--- Post-trim quality check of trimmed data with fastqc.'''
    singularity: 
        fastqc_quayurl
    threads: 2 
    run:
        ### quayurl = biocontainers['fastqc']['quayurl'] + ":" + biocontainers['fastqc']['version']

        # get output file name with wildcards replaced
        pre_trimming_output_wc = pre_trimming_output.format(**wildcards)

        # get input file name with wildcards replaced
        pre_trimming_input_wc = pre_trimming_input.format(**wildcards)

        # get directory for final output
        output_dir = dirname(pre_trimming_output_wc)

        shell('''
            set -x
            docker run \
                -u "$(id -u):$(id -g)" \
                -v {PWD}/{data_dir}:/{data_dir} \
                -it \
                {fastqc_quayurl} \
                fastqc \
                -t {threads} \
                /{pre_trimming_input_wc} \
                -o /{data_dir}
        ''')

