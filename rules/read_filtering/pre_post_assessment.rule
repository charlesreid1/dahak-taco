import os, re
from os.path import join, dirname

data_dir = config['data_dir']
readfilt = config['read_filtering']
biocontainers = config['biocontainers']

PWD = os.getcwd()

quayurl = biocontainers['fastqc']['quayurl'] + ":" + biocontainers['fastqc']['version']

pre_trimming_input  = join(data_dir, readfilt['read_patterns']['pre_trimming_pattern'])
target_suffix = readfilt['quality_assessment']['fastqc_suffix']
target_ext = "%s.zip"%(target_suffix)
pre_trimming_output = re.sub('\.fq\.gz',target_ext,pre_trimming_input)

rule pre_trimming_quality_assessment:
    """
    Perform a pre-trimming quality check 
    of the reads from the sequencer.

    See pre_post_assessment.md
    """
    input:
        pre_trimming_input
    output: 
        pre_trimming_output
    message: 
        '''--- Pre-trim quality check of trimmed data with fastqc.'''
    #singularity: 
    #    quayurl
    threads: 2
    run:
        # get output file name with wildcards replaced
        pre_trimming_output_wc = pre_trimming_output.format(**wildcards)

        # get input file name with wildcards replaced
        pre_trimming_input_wc = pre_trimming_input.format(**wildcards)

        # get directory for final output
        output_dir = dirname(pre_trimming_output_wc)

        if(not isfile(pre_trimming_output_wc)):
            shell('''
                docker run \
                    -v {PWD}/{data_dir}:/{data_dir} \
                    -it \
                    biocontainers/fastqc \
                    fastqc \
                    -t {threads} \
                    /{pre_trimming_input_wc} \
                    -o /{data_dir}
            ''')

post_trimming_input  = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'])
target_suffix = readfilt['quality_assessment']['fastqc_suffix']
target_ext = "%s.zip"%(target_suffix)
post_trimming_output = re.sub('\.fq\.gz',target_ext,post_trimming_input)

rule post_trimming_quality_assessment:
    """
    Perform a post-trimming quality check 
    of the reads from the sequencer.

    See post_post_assessment.md
    """
    input:
        post_trimming_input
    output:
        post_trimming_output
    message: 
        '''--- Post-trim quality check of trimmed data with fastqc.'''
    singularity: 
        quayurl
    threads: 2 
    run:
        # get output file name with wildcards replaced
        pre_trimming_output_wc = pre_trimming_output.format(**wildcards)

        # get input file name with wildcards replaced
        pre_trimming_input_wc = pre_trimming_input.format(**wildcards)

        # get directory for final output
        output_dir = dirname(pre_trimming_output_wc)

        if(not isfile(output_dir)):
            shell('''
                docker run \
                    -v {PWD}/{data_dir}:/{data_dir} \
                    -it \
                    biocontainers/fastqc \
                    fastqc \
                    -t {threads} \
                    /{pre_trimming_input_wc} \
                    -o /{data_dir}
            ''')

