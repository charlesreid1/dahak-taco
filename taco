#!/usr/bin/env python
import sys, os, json
import argparse
import snakemake

logo = """
 _______  _______  _______  _______
|       ||   _   ||       ||       |
|_     _||  |_|  ||       ||   _   |
  |   |  |       ||       ||  | |  |
  |   |  |       ||      _||  |_|  |
  |   |  |   _   ||     |_ |       |
  |___|  |__| |__||_______||_______|

experimental CL interface for dahak workflows
"""


pwd = os.path.abspath(os.path.dirname(__file__))


def main(args):

    # Snakefile needs to be in current directory
    snakefile = os.path.join(pwd, 'Snakefile')
    if(not os.path.exists(snakefile)):
        sys.stderr.write('Error: cannot find Snakefile at {}\n'.format(snakefile))
        sys.exit(-1)


    # Workflow file should be next arg
    workflowfile = None
    if os.path.exists(args.workflowfile) and not os.path.isdir(args.workflowfile):
        workflowfile = args.workflowfile
    else:
        for suffix in ('', '.json'):
            tryfile = os.path.join(pwd, args.workflowfile + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('Found workflowfile at {}\n'.format(tryfile))
                workflowfile = tryfile
                break

    if not workflowfile:
        sys.stderr.write('Error: cannot find workflowfile {}\n'.format(args.workflowfile))
        sys.exit(-1)

    # Next, find the workflow params file
    paramsfile = None
    if os.path.exists(args.paramsfile) and not os.path.isdir(args.paramsfile):
        paramsfile = args.paramsfile
    else:
        for suffix in ('', '.json'):
            tryfile = os.path.join(pwd, args.paramsfile + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('Found paramsfile at {}\n'.format(tryfile))
                paramsfile = tryfile
                break

    if not paramsfile:
        sys.stderr.write('Error: cannot find paramsfile {}\n'.format(args.paramsfile))
        sys.exit(-1)

    with open(workflowfile, 'rt') as fp:
        workflow_info = json.load(fp)

    target = workflow_info['workflow_target']

    config = dict()

    print('--------')
    print('details!')
    print('\tsnakefile: {}'.format(snakefile))
    print('\tconfig: {}'.format(workflowfile))
    print('\tparams: {}'.format(paramsfile))
    print('\ttarget: {}'.format(target))
    print('--------')

    status = snakemake.snakemake(snakefile, 
                                 configfile=paramsfile,
                                 targets=[target], 
                                 printshellcmds=True,
                                 dryrun=args.dry_run, 
                                 config=config)

    if status: # translate "success" into shell exit code of 0
        return 0
    return 1



if __name__ == '__main__':

    # TODO:
    # add a list of common rules to the output
    # mention where to look for full list of rules
    # add command line option to change options shared by all rules
    # expain how to change other rules/settings

    parser = argparse.ArgumentParser(description='taco: the experimental dahak cli', usage='''taco <workflow> <parameters> [<target>]

taco is an experimental dahak cli that runs dahak workflows.
It uses a user-provided workflow config file and parameter file.

The <workflow> and <parameters> arguments should specify 
names of JSON files in the current directory, sans ".json" extension.

To get help, run ./taco --help

\r\r''')

    parser.add_argument('workflowfile', help="""To specify a workflow, create a JSON file containing the name of the Snakemake rules you wish to run.""")
    parser.add_argument('paramsfile', help="""Specify parameters using a JSON file, and pass the name of the JSON file.""")
    parser.add_argument('-n', '--dry-run', action='store_true')
    args = parser.parse_args()

sys.exit(main(args))
