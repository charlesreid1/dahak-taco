#!/usr/bin/env python
import sys, os, json
import argparse
import snakemake

logo = """
 _______  _______  _______  _______
|       ||   _   ||       ||       |
|_     _||  |_|  ||       ||   _   |
  |   |  |       ||       ||  | |  |
  |   |  |       ||      _||  |_|  |
  |   |  |   _   ||     |_ |       |
  |___|  |__| |__||_______||_______|

experimental CL interface for dahak workflows
"""


pwd = os.path.abspath(os.path.dirname(__file__))


def main(args):

    # Workflow name will help us pick which Snakefile to use
    snakefile = None
    snakepath = os.path.join('rules',args.workflowname,'Snakefile')
    if(os.path.exists(snakepath) and os.path.isfile(snakepath)):
        snakefile = snakepath
    else:
        raise Exception("Error: no Snakefile found at %s"%(snakepath))

    # Workflow file should be next arg
    workflowfile = None
    if(args.workflowfile=='ls'):
        # This is a hack
        status = snakemake.snakemake(snakefile, 
                listrules=True)
        return 0

    elif os.path.exists(args.workflowfile) and not os.path.isdir(args.workflowfile):
        workflowfile = args.workflowfile
    else:
        for suffix in ('', '.json'):
            tryfile = os.path.join(pwd, args.workflowfile + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('Found workflowfile at {}\n'.format(tryfile))
                workflowfile = tryfile
                break

    if not workflowfile:
        sys.stderr.write('Error: cannot find workflowfile {}\n'.format(args.workflowfile))
        sys.exit(-1)

    # Next, find the workflow params file
    # (note: args.paramsfile is the second argument, which sets nargs = *,
    #  so it is a list, unlike args.workflow file above)
    paramsfile = None
    if os.path.exists(args.paramsfile[0]) and not os.path.isdir(args.paramsfile[0]):
        paramsfile = args.paramsfile[0]
    else:
        for suffix in ('', '.json'):
            tryfile = os.path.join(pwd, args.paramsfile[0] + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('Found paramsfile at {}\n'.format(tryfile))
                paramsfile = tryfile
                break

    if not paramsfile:
        sys.stderr.write('Error: cannot find paramsfile {}\n'.format(args.paramsfile[0]))
        sys.exit(-1)

    with open(workflowfile, 'rt') as fp:
        workflow_info = json.load(fp)

    targets = None

    # We always ask the user for targets (plural)
    # and we always take a list of targets (even if 1).
    # That's just how things are done,
    # to keep this program simple.
    if 'workflow_targets' in workflow_info.keys():
        # should always be a list, even if one item
        targets = workflow_info['workflow_targets']
        if(type(targets)!=type([])):
            targets = [targets]

    else:
        err = "Error: workflow configuration has no information about targets.\n"
        err += "Try setting 'workflow_targets' in configuration."
        raise Exception(err)

    config = dict(data_dir='data/')

    print('--------')
    print('taco workflow details:')
    print('\tsnakefile: {}'.format(snakefile))
    print('\tconfig: {}'.format(workflowfile))
    print('\tparams: {}'.format(paramsfile))
    print('\ttargets: {}'.format(targets))
    print('--------')

    status = snakemake.snakemake(snakefile, 
                                 configfile=paramsfile,
                                 targets=targets, 
                                 printshellcmds=True,
                                 dryrun=args.dry_run, 
                                 config=config)

    if status: # translate "success" into shell exit code of 0
        return 0
    else:
        print("")
        print("Error: Failed to call Snakemake API")
        print("You might have requested an output file or rule that does not exist.")
        print("Try adding the data directory location as a prefix to your file names.")
        print("")
        print("config['data_dir'] = %s"%(config['data_dir']))
        print("")
        return 1



if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='taco: the experimental dahak cli', usage='''taco <workflow> <parameters> [<target>]

taco is an experimental command line interface for running dahak workflows.

For the full documentation, visit:

    https://charlesreid1.github.io/dahak-taco/

For a quick start, visit:

    https://charlesreid1.github.io/dahak-taco/intro/quickstart.html

Users should provide a <workflow> JSON file and a <parameters> JSON file.
These should specify a relative path to JSON files (with or without
the JSON extension).

To get more help, run ./taco --help

\r\r''')

    # We provide the user with a "taco ls" command
    # by making "paramsfile" optional,
    # and checking if "workflowfile" is "ls".
    #
    # This hack is acceptable for this one subcommand,
    # but if we want to add more subcommands, we should
    # create multiple parsers like civilized people.
    #
    parser.add_argument('workflowname', help="""Specify the name of a workflow to run.""")
    parser.add_argument('workflowfile', help="""Specify a workflow using a JSON file, and passing the name of the Snakemake rules or targets.""")
    parser.add_argument('paramsfile', help="""Specify parameters using a JSON file, and pass the name of the JSON file.""", nargs='*')
    parser.add_argument('-n', '--dry-run', action='store_true')
    args = parser.parse_args()

sys.exit(main(args))

